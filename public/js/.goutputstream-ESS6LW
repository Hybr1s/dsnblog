snack.ready(function() {
    
    snack.wrap('.edit').attach('click', function(evt) {
        evt.preventDefault();

        var options = {
            method: 'get',
            url: evt.srcElement.parentNode.href,
        }
        snack.request(options, function (err, res){
            if (err) {
                alert('error fetching option');
                return;
            }
            var parent = evt.srcElement.parentNode.parentNode;
            while (! parent.className == 'container') {
                var parent = parent.parentNode;
            }
            var form = document.createElement();
            form.innerHTML = res;
            var original = parent;
            parent.parentNode.replaceChild(form, parent);

            /* TODO: Find a way to use this and to get the actual page afterwards */
            /*var params = {
                node: form.firstChild,
                event: 'submit'
            }
            
            snack.listener(params, function(evt) {
                evt.preventDefault();
                elements = evt.srcElement.elements;
                var data = {};
                for(var i=0;i < elements.length; i++) {
                    if (elements[i].name != "") {
                        data[elements[i].name] = elements[i].value;
                    }
                }
                var options = {
                    method: 'post',
                    url: evt.srcElement.action,
                }
                options["data"] = data;
                snack.request(options, function (err, res){
                     if (err) {
                        alert('error setting option');
                        return;
                    }
                    evt.srcElement.parentNode.replaceChild(original, evt.srcElement);
                });
            })*/
        });
    });

    snack.wrap('.delete').attach('click', function(evt) {
        evt.preventDefault();
        
        var options = {
            method: 'post',
            url: evt.srcElement.parentNode.action,
        }
        snack.request(options, function (err, res) {
            if (err) {
                alert('error fetching option');
                return;
            }
            var parent = evt.srcElement.parentNode.parentNode;
            while (! parent.className == 'container') {
                var parent = parent.parentNode;
            }
            parent.parentNode.removeChild(parent);
        });
    });
    
});

function inspect(obj, maxLevels, level)
{
  var str = '', type, msg;

    // Start Input Validations
    // Don't touch, we start iterating at level zero
    if(level == null)  level = 0;

    // At least you want to show the first level
    if(maxLevels == null) maxLevels = 1;
    if(maxLevels < 1)     
        return '<font color="red">Error: Levels number must be > 0</font>';

    // We start with a non null object
    if(obj == null)
    return '<font color="red">Error: Object <b>NULL</b></font>';
    // End Input Validations

    // Each Iteration must be indented
    str += '<ul>';

    // Start iterations for all objects in obj
    for(property in obj)
    {
      try
      {
          // Show "property" and "type property"
          type =  typeof(obj[property]);
          str += '<li>(' + type + ') ' + property + 
                 ( (obj[property]==null)?(': <b>null</b>'):('')) + '</li>';

          // We keep iterating if this property is an Object, non null
          // and we are inside the required number of levels
          if((type == 'object') && (obj[property] != null) && (level+1 < maxLevels))
          str += inspect(obj[property], maxLevels, level+1);
      }
      catch(err)
      {
        // Is there some properties in obj we can't access? Print it red.
        if(typeof(err) == 'string') msg = err;
        else if(err.message)        msg = err.message;
        else if(err.description)    msg = err.description;
        else                        msg = 'Unknown';

        str += '<li><font color="red">(Error) ' + property + ': ' + msg +'</font></li>';
      }
    }

      // Close indent
      str += '</ul>';

    return str;
}